import { Students } from './students.entity';
import { Repository } from 'typeorm';
import { CreateStudentInput } from './create-student.input.type';
import { Tasks } from 'src/tasks/tasks.entity';
import { TasksService } from 'src/tasks/tasks.service';
import { CommentTaskInput } from './comment-task-input';
import { PersonalTasks } from 'src/tasks/perosonal.tasks.entity';
import { File } from './file.entity';
import { FileUploadDto } from './file.upload.dto';
import { FileInput } from './file.input';
import { MoveToStatusInput } from './moveToStatus.input';
import { TeachersService } from 'src/teachers/teachers.service';
export declare class StudentsService {
    private studentRepository;
    private fileRepository;
    private taskService;
    private teacherService;
    constructor(studentRepository: Repository<Students>, fileRepository: Repository<File>, taskService: TasksService, teacherService: TeachersService);
    getUsernameById(id: string): Promise<string>;
    createStudent(createStudentInput: CreateStudentInput): Promise<Students>;
    getStudentsIdsBySem(semester: number): Promise<any[]>;
    getStudents(): Promise<Students[]>;
    getStudent(username: string): Promise<Students>;
    getStudentsBySemester(semester: number): Promise<Students[]>;
    assignStudentsWithTask(task: Tasks): Promise<void>;
    assignStudentWithPersonalTask(task: PersonalTasks): Promise<void>;
    getStudentUsernamesBySem(semester: number): Promise<any[]>;
    removeTaskFromStudent(name: string): Promise<void>;
    removePersonalTaskFromStudents(name: string, username: string): Promise<void>;
    moveTaskToExecution(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    movePersonalTaskToExecution(moveToStateInput: MoveToStatusInput): Promise<boolean>;
    moveTaskToCompleted(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    movePersonalTaskToCompleted(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    moveTaskToTodo(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    movePersonalTaskToTodo(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    moveTaskToFinished(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    movePersonalTaskToFinished(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    movePersonalTaskToReview(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    moveTaskToReview(moveToStatusInput: MoveToStatusInput): Promise<boolean>;
    searchStudentByName(stud_name: string): Promise<Students>;
    checkStudentByTaskName(stud_name: string, tasks_name: string): Promise<boolean>;
    commentOnTask(commentInput: CommentTaskInput): Promise<true>;
    getStudentById(stud_id: string): Promise<Students>;
    uploadFile(filename: string, fileUploadDto: FileUploadDto): Promise<File>;
    deleteFileUpload(username: string, task_name: string, type: string): Promise<boolean>;
    deleteUploadedFileByTask(task_name: string, type: string): Promise<boolean>;
    getFile(fileInput: FileInput): Promise<File[]>;
    getAllStudentTodo(username: string): Promise<Promise<Tasks>[]>;
    getAllStudentPersonalTodo(username: string): Promise<Promise<PersonalTasks>[]>;
    getAllStudentExecuting(username: string): Promise<Promise<Tasks>[]>;
    getAllStudentPersonalExecuting(username: string): Promise<Promise<PersonalTasks>[]>;
    getAllStudentCompletedList(username: string): Promise<Promise<Tasks>[]>;
    getAllReviewOfStudent(username: string): Promise<Promise<Tasks>[]>;
    getAllStudentPersonalCompletedList(username: string): Promise<Promise<PersonalTasks>[]>;
    getAllStudentReviewList(username: string): Promise<string[]>;
    getAllStudentPersonalReviewList(username: string): Promise<Promise<PersonalTasks>[]>;
    getAllStudentFinishedList(username: string): Promise<string[]>;
    getAllStudentPerosnalFinishedList(username: string): Promise<Promise<PersonalTasks>[]>;
    getCountOfPersonalTasks(username: string): Promise<number[]>;
    getCountOfSchoolTasks(username: string): Promise<number[]>;
    getCountOfAllTask(username: string): Promise<number[][]>;
    getRecentTasks(username: string): Promise<string[]>;
}
